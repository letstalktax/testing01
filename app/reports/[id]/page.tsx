import React from 'react';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { eq } from 'drizzle-orm';
import { auth } from '@/app/(auth)/auth';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { sql } from 'drizzle-orm';
import { notFound } from 'next/navigation';

interface ReportPageProps {
  params: {
    id: string;
  };
}

// Define the report type
interface Report {
  id: string;
  chatId: string;
  userId: string;
  content: string;
  summary: string;
  createdAt: string | Date;
}

// Initialize the database client
// biome-ignore lint: Forbidden non-null assertion.
const client = postgres(process.env.POSTGRES_URL!);
const db = drizzle(client);

async function getReport(reportId: string): Promise<Report | null> {
  try {
    // Use a more generic type for the result
    const result = await db.execute(
      sql`SELECT id, "chatId", "userId", content, summary, "createdAt" FROM "Report" WHERE id = ${reportId} LIMIT 1`
    );
    
    if (!result || result.length === 0) {
      return null;
    }
    
    // Type cast the raw database result to our Report interface
    const rawReport = result[0];
    return {
      id: rawReport.id as string,
      chatId: rawReport.chatId as string,
      userId: rawReport.userId as string,
      content: rawReport.content as string,
      summary: rawReport.summary as string,
      createdAt: rawReport.createdAt as string,
    };
  } catch (error) {
    console.error('Error fetching report:', error);
    return null;
  }
}

export default async function ReportPage({ params }: ReportPageProps) {
  const session = await auth();
  
  if (!session) {
    return (
      <div className="flex h-screen flex-col items-center justify-center">
        <div className="rounded-lg border bg-background p-8 max-w-md">
          <h1 className="text-xl font-bold mb-4">Authentication Required</h1>
          <p className="mb-4">You need to be logged in to view this report.</p>
          <Button asChild>
            <Link href="/login">Sign In</Link>
          </Button>
        </div>
      </div>
    );
  }
  
  const report = await getReport(params.id);
  
  if (!report) {
    notFound();
  }
  
  // Create a Date object from the createdAt string/timestamp
  const createdAt = new Date(report.createdAt as string);
  
  return (
    <div className="container mx-auto py-8 px-4">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">MusTax AI Analysis Report</h1>
          <p className="text-muted-foreground mt-2">
            Generated on {createdAt.toLocaleDateString()} at {createdAt.toLocaleTimeString()}
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" asChild>
            <Link href={`/chat/${report.chatId}`}>
              Back to Chat
            </Link>
          </Button>
          <Button onClick={() => window.print()}>
            Print Report
          </Button>
        </div>
      </div>
      
      <div className="rounded-lg border bg-background p-6 md:p-8">
        <div 
          className="prose prose-sm sm:prose lg:prose-lg max-w-none" 
          dangerouslySetInnerHTML={{ __html: report.content }}
        />
      </div>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-muted-foreground">
          This report was generated by MusTax AI Analyze. The analysis is based on the document provided and 
          should be reviewed by a qualified tax professional before making any decisions.
        </p>
      </div>
    </div>
  );
} 