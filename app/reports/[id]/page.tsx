import React from 'react';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { eq } from 'drizzle-orm';
import { auth } from '@/app/(auth)/auth';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { sql } from 'drizzle-orm';
import { notFound } from 'next/navigation';
import { promises as fs } from 'fs';
import path from 'path';
import { Metadata, ResolvingMetadata } from 'next';

interface ReportPageProps {
  params: {
    id: string;
  };
}

// Define the report type
interface Report {
  id: string;
  chatId: string;
  userId: string;
  content: string;
  summary: string;
  createdAt: string | Date;
}

// Initialize the database client
// biome-ignore lint: Forbidden non-null assertion.
const client = postgres(process.env.POSTGRES_URL!);
const db = drizzle(client);

async function getReport(reportId: string): Promise<Report | null> {
  try {
    // Use a more generic type for the result
    const result = await db.execute(
      sql`SELECT id, "chatId", "userId", content, summary, "createdAt" FROM "Report" WHERE id = ${reportId} LIMIT 1`
    );
    
    if (!result || result.length === 0) {
      return null;
    }
    
    // Type cast the raw database result to our Report interface
    const rawReport = result[0];
    return {
      id: rawReport.id as string,
      chatId: rawReport.chatId as string,
      userId: rawReport.userId as string,
      content: rawReport.content as string,
      summary: rawReport.summary as string,
      createdAt: rawReport.createdAt as string,
    };
  } catch (error) {
    console.error('Error fetching report:', error);
    return null;
  }
}

export async function generateMetadata(
  { params }: ReportPageProps,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // Read the report to get a title from it if possible
  try {
    const report = await getReportFromFile(params.id);
    if (report) {
      // Try to extract title from the HTML content
      const titleMatch = report.match(/<title>(.*?)<\/title>/i);
      const title = titleMatch ? titleMatch[1] : 'Tax Analysis Report';
      
      return {
        title: `${title} | MusTax AI`,
        description: 'Professional tax analysis report generated by MusTax AI',
      };
    }
  } catch (error) {
    console.error('Error generating metadata for report:', error);
  }
  
  return {
    title: 'Tax Analysis Report | MusTax AI',
    description: 'Professional tax analysis report generated by MusTax AI',
  };
}

async function getReportFromFile(id: string): Promise<string | null> {
  try {
    // Sanitize the ID to prevent directory traversal
    const sanitizedId = id.replace(/[^a-zA-Z0-9-]/g, '');
    
    if (!sanitizedId) {
      return null;
    }
    
    // Get the file path
    const reportPath = path.join(process.cwd(), 'public', 'reports', `${sanitizedId}.html`);
    
    // Check if the file exists
    try {
      await fs.access(reportPath);
    } catch (error) {
      return null;
    }
    
    // Read the file
    const report = await fs.readFile(reportPath, 'utf-8');
    return report;
  } catch (error) {
    console.error('Error getting report:', error);
    return null;
  }
}

export default async function ReportPage({ params }: ReportPageProps) {
  try {
    const authCookie = await auth();
    
    if (!authCookie) {
      return (
        <div className="flex h-screen flex-col items-center justify-center">
          <div className="rounded-lg border bg-background p-8 max-w-md">
            <h1 className="text-xl font-bold mb-4">Authentication Required</h1>
            <p className="mb-4">You need to be logged in to view this report.</p>
            <Button asChild>
              <Link href="/login">Sign In</Link>
            </Button>
          </div>
        </div>
      );
    }
  } catch (error) {
    console.error("Error checking authentication:", error);
  }
  
  if (!params.id) {
    notFound();
  }
  
  const report = await getReportFromFile(params.id);
  
  if (!report) {
    notFound();
  }
  
  // Get the report URL for direct access
  const reportUrl = `/reports/${params.id}.html`;
  
  return (
    <div className="container mx-auto py-8 px-4">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">MusTax AI Analysis Report</h1>
          <p className="text-muted-foreground mt-2">
            Professional tax analysis based on financial statements
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" asChild>
            <Link href="/analyze">
              Back to Analyze
            </Link>
          </Button>
          <Button asChild>
            <Link href={reportUrl} target="_blank">
              Open Full Report
            </Link>
          </Button>
        </div>
      </div>
      
      <div className="rounded-lg border bg-background p-6 md:p-8 overflow-auto">
        <p className="text-center mb-6 text-sm bg-blue-50 dark:bg-blue-900/30 py-3 rounded-md">
          For the best experience, please <Link href={reportUrl} target="_blank" className="text-blue-600 underline">open the full report</Link> in a new tab. 
          It includes A4 print formatting with headers and footers.
        </p>
        
        <iframe 
          src={reportUrl}
          className="w-full min-h-[70vh] border-0"
          title="Tax Analysis Report"
        />
      </div>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-muted-foreground">
          This report was generated by MusTax AI Analyze. The analysis is based on the financial statements provided and 
          should be reviewed by a qualified tax professional before making any decisions.
        </p>
      </div>
    </div>
  );
} 